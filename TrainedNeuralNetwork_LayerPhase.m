function [y1] = myNeuralNetworkFunction(x1)

%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx8 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [0.523599;1.047;1.047;18.4664016242;0.00562510889315;0.0118724643453;1;1];
x1_step1_gain = [1.90985302726029;1.52788388082506;1.52788388082506;0.145963885867409;80.5634074446721;51.8747579083087;0.222222222222222;0.222222222222222];
x1_step1_ymin = -1;

% Layer 1
b1 = [-3.6446521655560868425;-2.7307193027502081328;-0.11190546436342919956;-4.0487159563627681536;-8.3091762241865456673;-2.5219622486535291372;3.1819168921800762284];
IW1_1 = [0.30863706698477422208 0.0060300521147883352421 -0.033915356741484881109 0.37405496096135570916 0.10208336927101867297 0.23999041234420101509 -0.78060873615594872366 -1.0326124747774036994;-6.3098037018949675314 0.041481464261282227635 -0.042170616340798855459 7.9029683065975087075 0.18060951329056940118 0.31758628924749893185 -0.21378187149743591022 -0.18212868987767336093;0.29193414944911544318 -0.005650343889304384852 0.0081701647424252381996 -10.30326645833414112 -0.092942634479048658047 0.22725602668065211787 -1.1713672537658750272 -1.3526985340407950975;-0.1995229943291499386 -0.038346531890734794623 0.06877283022267330348 0.20436966292611050133 -0.2285769758611681246 0.84475712029513960744 -1.6270487240259543515 -0.1042823678886835026;-7.4349114796521895698 -0.013370966227910910384 0.060764973578620137817 17.022589670528585515 -3.8519581538235767582 -5.2673578621724477244 0.83753912600110413944 1.2112016359649739883;-2.9784735656596375009 0.0033431583017404075536 -0.0028962148112791231275 6.0089142703066187323 -0.043571189222449888123 -0.06059914814449490067 0.0010326669224273790637 0.0038285531970967926103;3.5208643409320252715 5.7564145169108815736 -2.6504509525457264907 2.0927055908278058283 -1.6012208951085349362 3.1377121572272637096 -4.8522791164461525071 -0.80915229816484024461];

% Layer 2
b2 = 14.893893630320812704;
LW2_1 = [11.381153194626694614 0.81524045870239159051 -0.17600997753218114439 4.5758243862754817144 2.6378667093987586689 -3.8242880252986477529 0.0036867499834490973475];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.0839042503484268;
y1_step1_xoffset = 0.115529067306145;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
